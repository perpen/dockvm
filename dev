#!/bin/bash
set -euo pipefail

TMP=/tmp/dockvm # ram for speed
VAR_TMP=/var/tmp/dockvm # for storing raw disk image, not supported on tmpfs
TAG="archlinux-fs"
self="$(readlink -f $0)"

make-container() {
    docker build -t $TAG .
}

# creates a dir, add files from the docker image
make-dir() {
    set -x
    make-container
    local dir="$TMP/$TAG"
    sudo rm -rf $dir
    mkdir -p $dir
    docker run --rm -ti -v "$dir:/target" "$TAG" \
        bash -c "tar cf - --one-file-system --exclude /target / | tar xf - -C /target"
    sudo du -sh "$dir"
}

# create a raw disk image, add files from the docker image
make-image() {
    set -x
    make-container
    local size=10G
    local img=$VAR_TMP/$TAG.raw
    local mnt=$VAR_TMP/mnt

    rm -f "$img"
    qemu-img create -f raw $img $size
    mkfs.ext4 $img

    mkdir -p $mnt
    sudo mount $img $mnt
    docker run --rm -ti -v "$mnt:/target" "$TAG" \
        bash -c "tar cf - --one-file-system --exclude /target / | tar xf - -C /target"
    ls -F $mnt
    sudo umount $mnt
}

# runs virtiofs on the host, against the dir created by make-dir
virtiofsd-dir() {
    mkdir -p $TMP/sockdir
    while :; do
        sudo /usr/lib/qemu/virtiofsd \
            --socket-path=$TMP/sockdir/vhostqemu \
            -o source=$TMP/$TAG \
            -o cache=none
    done
}

virtiofsd-container() {
    # We want virtiofsd to expose /, but since it does a pivot_root to the target dir
    # we have an error pivoting from / to /. To get around this we bind-mount / to
    # another name.
    mkdir -p $TMP/sockdir
    while :; do
        docker run --rm --privileged -ti \
            --security-opt seccomp=unconfined \
            -v $TMP/sockdir:/tmp/sockdir \
            archlinux-fs bash -c 'pacman -S --noconfirm qemu-virtiofsd \
                && mkdir /slash \
                && mount --bind / /slash \
                && /usr/lib/qemu/virtiofsd --socket-path=/tmp/sockdir/vhostqemu -o source=/slash -o cache=none'
    done
}

# runs vm against the disk image
vm-image() {
    [ "$(whoami)" = root ] || exec sudo $self vm-image
    local ram=256m

    # uses serial console, C-a X to quit
    qemu-system-x86_64 \
        -enable-kvm -smp $(nproc) \
        -nographic -append "console=ttyS0 rootfstype=ext4 root=/dev/sda rw" \
        -m $ram \
        -device virtio-scsi-pci,id=scsi \
        -drive if=none,id=vd0,format=raw,file=$VAR_TMP/$TAG.raw,cache=none \
        -device scsi-hd,drive=vd0 \
        -kernel $TMP/$TAG/boot/bzImage
}

# runs vm with files served by virtiofsd
vm-virtiofs() {
    [ "$(whoami)" = root ] || exec sudo $self vm-virtiofs
    local ram=256m

    # uses serial console, C-a X to quit
    qemu-system-x86_64 \
        -enable-kvm -smp $(nproc) \
        -nographic -append "console=ttyS0 rootfstype=virtiofs root=myfs rw" \
        -m $ram \
        -object memory-backend-file,id=mem,size=$ram,mem-path=/dev/shm,share=on \
        -numa node,memdev=mem \
        -chardev socket,id=char0,path=$TMP/sockdir/vhostqemu \
        -device vhost-user-fs-pci,queue-size=1024,chardev=char0,tag=myfs \
        -kernel $TMP/$TAG/boot/bzImage
}

cd "$(dirname $0)"
"$@"
